<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 800 500" width="100%" height="auto">
  <!-- Styles -->
  <style>
    text { font-family: Arial, sans-serif; }
    .title { font-size: 20px; font-weight: bold; text-anchor: middle; }
    .axis-label { font-size: 16px; text-anchor: middle; }
    .graph-label { font-size: 14px; font-weight: bold; }
    .curve { fill: none; stroke-width: 3; }
    .grid { stroke: #ddd; stroke-width: 0.5; }
    .current-value { font-size: 14px; font-weight: bold; }
    .formula { font-size: 14px; font-style: italic; }
    .slider-label { font-size: 14px; text-anchor: end; }
    .slider-value { font-size: 14px; text-anchor: start; }
    .connector-line { stroke: #888; stroke-width: 1; stroke-dasharray: 5,3; }
  </style>

  <!-- Background -->
  <rect width="100%" height="100%" fill="white"/>
  
  <!-- Title -->
  <text x="400" y="30" class="title">Frequency Dependence of Reactance</text>

  <!-- Formulas -->
  <text x="150" y="70" class="formula">X_L = ωL = 2πfL</text>
  <text x="650" y="70" class="formula">X_C = 1/(ωC) = 1/(2πfC)</text>

  <!-- X-Axis (Frequency) -->
  <line x1="100" y1="350" x2="700" y2="350" stroke="black" stroke-width="2"/>
  <text x="400" y="390" class="axis-label">Frequency (Hz)</text>
  
  <!-- Y-Axis (Reactance) -->
  <line x1="100" y1="350" x2="100" y2="100" stroke="black" stroke-width="2"/>
  <text x="60" y="225" class="axis-label" transform="rotate(-90,60,225)">Reactance (Ω)</text>

  <!-- Grid lines -->
  <line x1="100" y1="250" x2="700" y2="250" class="grid"/>
  <line x1="100" y1="150" x2="700" y2="150" class="grid"/>
  <line x1="250" y1="100" x2="250" y2="350" class="grid"/>
  <line x1="400" y1="100" x2="400" y2="350" class="grid"/>
  <line x1="550" y1="100" x2="550" y2="350" class="grid"/>
  
  <!-- Axis markers -->
  <text x="250" y="370" class="axis-label">250</text>
  <text x="400" y="370" class="axis-label">500</text>
  <text x="550" y="370" class="axis-label">750</text>
  <text x="700" y="370" class="axis-label">1000</text>
  <text x="80" y="350" class="axis-label">0</text>
  <text x="80" y="250" class="axis-label">50</text>
  <text x="80" y="150" class="axis-label">100</text>
  
  <!-- Inductive reactance curve -->
  <path id="inductivePath" d="M100,350 L700,100" class="curve" stroke="#4285F4"/>
  <text x="650" y="120" class="graph-label" fill="#4285F4">Inductive Reactance (XL)</text>
  
  <!-- Capacitive reactance curve -->
  <path id="capacitivePath" d="M100,100 Q250,200 700,350" class="curve" stroke="#EA4335"/>
  <text x="160" y="120" class="graph-label" fill="#EA4335">Capacitive Reactance (XC)</text>
  
  <!-- Current frequency marker (vertical line) -->
  <line id="freqMarker" x1="250" y1="100" x2="250" y2="350" stroke="#222" stroke-width="1.5"/>
  
  <!-- Current values at selected frequency -->
  <circle id="indPoint" cx="250" cy="275" r="6" fill="#4285F4"/>
  <circle id="capPoint" cx="250" cy="200" r="6" fill="#EA4335"/>
  
  <!-- Horizontal lines to Y-axis for value reading -->
  <line id="indLine" x1="100" y1="275" x2="250" y2="275" class="connector-line" stroke="#4285F4"/>
  <line id="capLine" x1="100" y1="200" x2="250" y2="200" class="connector-line" stroke="#EA4335"/>
  
  <!-- Current values text -->
  <text id="indValue" x="90" y="275" class="current-value" text-anchor="end" fill="#4285F4">25Ω</text>
  <text id="capValue" x="90" y="200" class="current-value" text-anchor="end" fill="#EA4335">75Ω</text>
  
  <!-- Component values -->
  <g id="componentValues">
    <text x="400" y="430" text-anchor="middle">L = 50 mH, C = 10 µF</text>
  </g>
  
  <!-- Frequency slider -->
  <line x1="250" y1="460" x2="550" y2="460" stroke="#888" stroke-width="2"/>
  <text x="240" y="465" class="slider-label">Frequency:</text>
  <text id="freqValue" x="560" y="465" class="slider-value">250 Hz</text>
  <circle id="freqSlider" cx="250" cy="460" r="8" fill="#222" stroke="white" stroke-width="2"/>
  
  <!-- Animation script -->
  <script type="text/ecmascript"><![CDATA[
    // SVG elements
    const freqSlider = document.getElementById('freqSlider');
    const freqMarker = document.getElementById('freqMarker');
    const indPoint = document.getElementById('indPoint');
    const capPoint = document.getElementById('capPoint');
    const indLine = document.getElementById('indLine');
    const capLine = document.getElementById('capLine');
    const indValue = document.getElementById('indValue');
    const capValue = document.getElementById('capValue');
    const freqValue = document.getElementById('freqValue');
    
    // Component values
    const L = 0.05; // Henry (50 mH)
    const C = 0.00001; // Farad (10 µF)
    
    // Constants for scaling
    const minFreq = 0;
    const maxFreq = 1000;
    const minX = 100;
    const maxX = 700;
    const minY = 100;
    const maxY = 350;
    const maxReactance = 100; // Maximum reactance value on Y-axis
    
    // Convert frequency to X position
    function freqToX(freq) {
      return minX + (freq - minFreq) * (maxX - minX) / (maxFreq - minFreq);
    }
    
    // Convert reactance to Y position
    function reactanceToY(reactance) {
      // Clamp reactance to maxReactance for display purposes
      const clampedReactance = Math.min(reactance, maxReactance);
      return maxY - (clampedReactance / maxReactance) * (maxY - minY);
    }
    
    // Convert X position to frequency
    function xToFreq(x) {
      return minFreq + (x - minX) * (maxFreq - minFreq) / (maxX - minX);
    }
    
    // Calculate reactances
    function calculateReactances(freq) {
      const omega = 2 * Math.PI * freq;
      const XL = omega * L;
      const XC = (freq === 0) ? Infinity : 1 / (omega * C);
      return { XL, XC };
    }
    
    // Update visuals based on frequency
    function updateDisplay(x) {
      const freq = Math.round(xToFreq(x));
      const { XL, XC } = calculateReactances(freq);
      
      // Update positions
      freqMarker.setAttribute('x1', x);
      freqMarker.setAttribute('x2', x);
      
      const yL = reactanceToY(XL);
      const yC = reactanceToY(Math.min(XC, maxReactance));
      
      indPoint.setAttribute('cx', x);
      indPoint.setAttribute('cy', yL);
      indLine.setAttribute('x1', minX);
      indLine.setAttribute('x2', x);
      indLine.setAttribute('y1', yL);
      indLine.setAttribute('y2', yL);
      
      capPoint.setAttribute('cx', x);
      capPoint.setAttribute('cy', yC);
      capLine.setAttribute('x1', minX);
      capLine.setAttribute('x2', x);
      capLine.setAttribute('y1', yC);
      capLine.setAttribute('y2', yC);
      
      // Update text values
      indValue.setAttribute('y', yL);
      indValue.textContent = Math.round(XL) + 'Ω';
      
      if (freq === 0) {
        capValue.textContent = '∞Ω';
      } else {
        capValue.setAttribute('y', yC);
        capValue.textContent = Math.round(XC) + 'Ω';
      }
      
      freqValue.textContent = freq + ' Hz';
    }
    
    // Handle slider drag
    let isDragging = false;
    
    freqSlider.addEventListener('mousedown', startDrag);
    freqSlider.addEventListener('touchstart', startDrag);
    
    function startDrag(e) {
      e.preventDefault();
      isDragging = true;
      document.addEventListener('mousemove', drag);
      document.addEventListener('touchmove', drag);
      document.addEventListener('mouseup', endDrag);
      document.addEventListener('touchend', endDrag);
    }
    
    function drag(e) {
      if (!isDragging) return;
      
      let clientX;
      if (e.type === 'touchmove') {
        clientX = e.touches[0].clientX;
      } else {
        clientX = e.clientX;
      }
      
      const svgRect = freqSlider.ownerSVGElement.getBoundingClientRect();
      let mouseX = clientX - svgRect.left;
      
      // Constrain x position to slider range
      mouseX = Math.max(minX, Math.min(maxX, mouseX));
      
      // Update slider position
      freqSlider.setAttribute('cx', mouseX);
      
      // Update display
      updateDisplay(mouseX);
    }
    
    function endDrag() {
      isDragging = false;
      document.removeEventListener('mousemove', drag);
      document.removeEventListener('touchmove', drag);
      document.removeEventListener('mouseup', endDrag);
      document.removeEventListener('touchend', endDrag);
    }
    
    // Initialize display
    updateDisplay(250);
  ]]></script>
</svg> 